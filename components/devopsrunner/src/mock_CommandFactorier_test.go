// Code generated by mockery v2.21.1. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockCommandFactorier is an autogenerated mock type for the CommandFactorier type
type MockCommandFactorier struct {
	mock.Mock
}

type MockCommandFactorier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandFactorier) EXPECT() *MockCommandFactorier_Expecter {
	return &MockCommandFactorier_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: configuration
func (_m *MockCommandFactorier) Parse(configuration Configurationer) (Commander, error) {
	ret := _m.Called(configuration)

	var r0 Commander
	var r1 error
	if rf, ok := ret.Get(0).(func(Configurationer) (Commander, error)); ok {
		return rf(configuration)
	}
	if rf, ok := ret.Get(0).(func(Configurationer) Commander); ok {
		r0 = rf(configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Commander)
		}
	}

	if rf, ok := ret.Get(1).(func(Configurationer) error); ok {
		r1 = rf(configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandFactorier_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockCommandFactorier_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - configuration Configurationer
func (_e *MockCommandFactorier_Expecter) Parse(configuration interface{}) *MockCommandFactorier_Parse_Call {
	return &MockCommandFactorier_Parse_Call{Call: _e.mock.On("Parse", configuration)}
}

func (_c *MockCommandFactorier_Parse_Call) Run(run func(configuration Configurationer)) *MockCommandFactorier_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Configurationer))
	})
	return _c
}

func (_c *MockCommandFactorier_Parse_Call) Return(_a0 Commander, _a1 error) *MockCommandFactorier_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandFactorier_Parse_Call) RunAndReturn(run func(Configurationer) (Commander, error)) *MockCommandFactorier_Parse_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCommandFactorier interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCommandFactorier creates a new instance of MockCommandFactorier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCommandFactorier(t mockConstructorTestingTNewMockCommandFactorier) *MockCommandFactorier {
	mock := &MockCommandFactorier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
